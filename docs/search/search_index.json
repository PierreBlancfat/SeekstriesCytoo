{
    "docs": [
        {
            "location": "/",
            "text": "SeekStries\n\n\nSeekStries is an image processing tool made with Python 3 which can find striations within muscular fibers images. \nBelow an image example : \n\n\n\n\nAnd a result :\n\n\n\n\nGetting Started\n\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.\n\n\nPrerequisites\n\n\n\n\nPython 3.6 or later\n\n\nOpencv\n\n\nPIL\n\n\nTkinter\n\n\nScipy\n\n\nMatplotlib\n\n\n\n\n# List of commands (some will not work with Windows): \npip3 install opencv-python\npip3 install Pillow\nsudo apt-get install python3-tk\npip3 install scikit-image\n\n\n\n\nInstalling\n\n\nClone Git repository (If you don't have any idea what's Git, check this website : http://rogerdudler.github.io/git-guide/)\n\n\n\n\nRun Controller with your IDE to launch the application\n\n\n\n\nUsage\n\n\n\n\nThe software is in french so we will translate it line by line at the moment:\n - Save the images or not? If yes, it will be saved in two different repositories at the destination repository called \"Stries/\" and \"nonStries/\" depending on the fact that there are striations within the image or not.\n - Contouring? If yes, it puts a squared contouring around striations on top of the images\n - Select source repository\n - Select destination repository\nAfter clicking \"Start\" button and the end of the execution, the \"Stats\" button will be available and will open this window:\n\n\n\n\nIt allows you to check each percentages independently and open each images to see the concrete result.\nYou can save all the results in a *.csv and work with it later.\n\n\nAuthors\n\n\nThis project was made by a group of students of UGA in France : \nAnouar Anasse, Pierre Blanc-Fatin, Vincent Ribot, Quentin Rospars and Yara Van Daalen. \n\n\nReleases\n\n\nV1.0.0 : Main functionalities",
            "title": "Home"
        },
        {
            "location": "/#seekstries",
            "text": "SeekStries is an image processing tool made with Python 3 which can find striations within muscular fibers images. \nBelow an image example :    And a result :",
            "title": "SeekStries"
        },
        {
            "location": "/#getting-started",
            "text": "These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.",
            "title": "Getting Started"
        },
        {
            "location": "/#prerequisites",
            "text": "Python 3.6 or later  Opencv  PIL  Tkinter  Scipy  Matplotlib   # List of commands (some will not work with Windows): \npip3 install opencv-python\npip3 install Pillow\nsudo apt-get install python3-tk\npip3 install scikit-image",
            "title": "Prerequisites"
        },
        {
            "location": "/#installing",
            "text": "Clone Git repository (If you don't have any idea what's Git, check this website : http://rogerdudler.github.io/git-guide/)   Run Controller with your IDE to launch the application",
            "title": "Installing"
        },
        {
            "location": "/#usage",
            "text": "The software is in french so we will translate it line by line at the moment:\n - Save the images or not? If yes, it will be saved in two different repositories at the destination repository called \"Stries/\" and \"nonStries/\" depending on the fact that there are striations within the image or not.\n - Contouring? If yes, it puts a squared contouring around striations on top of the images\n - Select source repository\n - Select destination repository\nAfter clicking \"Start\" button and the end of the execution, the \"Stats\" button will be available and will open this window:   It allows you to check each percentages independently and open each images to see the concrete result.\nYou can save all the results in a *.csv and work with it later.",
            "title": "Usage"
        },
        {
            "location": "/#authors",
            "text": "This project was made by a group of students of UGA in France : \nAnouar Anasse, Pierre Blanc-Fatin, Vincent Ribot, Quentin Rospars and Yara Van Daalen.",
            "title": "Authors"
        },
        {
            "location": "/#releases",
            "text": "V1.0.0 : Main functionalities",
            "title": "Releases"
        },
        {
            "location": "/Model/",
            "text": "Area\n\n\n\nArea(self, xTopLeft, yTopLeft, xBotRight, yBotRight)\n\n\n\n\nborder\n\n\n\nlist() -> new empty list\nlist(iterable) -> new list initialized from iterable's items\n\nexpend\n\n\nArea.expend(self, x, y)\n\n\n\n\nexpend the current area if the position of the pixel is out of the area\n:param x: abscissa coordinate of the pixel\n:param y: ordinate coordonate of the pixel\n:return: None\n\n\nequals\n\n\n\nArea.equals(self, area)\n\n\n\n\nindicate if the current area is equal to the area in parameter.\n\n\n:param area: the area which may be equal to the current area\n:type area: list\n:return: True if the current area is equal to the area in parameter, false else.\n:rtype: bool\n\n\nnotContainedIn\n\n\n\nArea.notContainedIn(self, area)\n\n\n\n\nindicate if the current area is not contained in the area in parameter.\n\n\n:param area: the area which may contain the current area\n:type area: list\n:return: True if the current area is not contained in the area in parameter, false else.\n:rtype: bool\n\n\nnotToSmall\n\n\n\nArea.notToSmall(self, minWidth, minHeight)\n\n\n\n\nindicate if the current area isn't to small.\n\n\n:param minWidth: the minimal width for an area to be considered.\n:type minWidth: int\n:param minHeight: the minimal height for an area to be considered.\n:type minHeight: int\n:return: True if the current area isn't to small, false else.\n:rtype: bool\n\n\nModel\n\n\n\nModel(self, repSource, repDestination, controler)\n\n\n\n\nsetRepSource\n\n\n\nModel.setRepSource(self, repSource)\n\n\n\n\nset the source directory\n:param repSource: the path of the source repertory\n:type str\n:return:\n\n\nsetRepDestination\n\n\n\nModel.setRepDestination(self, repDestination)\n\n\n\n\nSet the destination directory. Create a directory if it doesn't exist\n:param repDestination: path of the destination directory\n:return:\n\n\nSegmentationUneImage\n\n\n\nModel.SegmentationUneImage(self, nomImg)\n\n\n\n\nDo the segmentation of one image, save it if users want to, put the bording boxes if the users want to.\n:param nomImg: Name of the image to segmentate\n:type a matrix which represent an image\n:return:\n\n\nrunSegmentation\n\n\n\nModel.runSegmentation(self, cbEntourage, otherRep)\n\n\n\n\nAction of the start bouton, product threads in order to speed up the computation\nProduct threah\n:param cbEntourage: CheckBox entourage value\n:type cbEntourage : IntVar\n:param otherRep: Checkbox save in an path\n:type otherRep : IntVar\n:return: 0 when segmentation is finished\n\n\nmultipleImage\n\n\n\nModel.multipleImage(self, nomsImages)\n\n\n\n\nMethod run in a thread, call segmentationUneImage fonction for each in the list of images in parameter\n:param nomsImages: a list of image name\n:type str\n:return:\n\n\nnormalizePath\n\n\n\nModel.normalizePath(self, s)\n\n\n\n\nNormalize a path to be compatible with windows\n:param s: a path\n:type str\n:return: s normalized\n\n\nfinDeTraitement\n\n\n\nModel.finDeTraitement(self)\n\n\n\n\nExecuted when a segmentation is finished, unlock stat bouton\n:return:\n\n\nSegmentation\n\n\n\nSegmentation(self, cheminSrc, cheminDest)\n\n\n\n\nClasse qui permet d'appeler les deux segmentations et calcul la proportion de stries dans une image\n\n\nsegmenterUneImage\n\n\n\nSegmentation.segmenterUneImage(matImg)\n\n\n\n\nSegmente une image (fibre et stries)\n:param matImg: une image sous forme de matrice\n:return: les deux masques des segmentations\n\n\npropStries\n\n\n\nSegmentation.propStries(masqueFibre, masqueStries)\n\n\n\n\nCalcul la proportion de stries dans une fibre\n:param masqueFibre: une matrice binaire\n:param masqueStries: une matrice binaire\n:return: proportion des stries dans la fibre\n\n\nSegmentationFibre\n\n\n\nSegmentationFibre(self, matImg)\n\n\n\n\nClasse permettant de segmenter la fibre\n\n\nsegmenter\n\n\n\nSegmentationFibre.segmenter(self)\n\n\n\n\nApplique la methode des k-means sur une image pour la segmenter\n@param img: image a traiter (creer precedemment grace a \"imread()\")\n@return: l'image apres traitement\n\n\nSegmentationGabor\n\n\n\nSegmentationGabor(self, matImg, csize=50, lsize=50, thetaMin=-0.4, thetaMax=0.45, pasTheta=0.2, sigma=2, gamma=5, lambdaMin=6, lambdaMax=15, pasLambda=2, psi=0, dossierSaveImgSeg=None, dossierSaveKernel=None)\n\n\n\n\ngabor\n\n\n\nSegmentationGabor.gabor(self, imgG, csize, lsize, thetaMin, thetaMax, pasTheta, sigma, gamma, lambdaMin, lambdaMax, pasLambda, psi)\n\n\n\n\nMain fonction, call buildfilter anc process\n:return:\n\n\nbuild_filters\n\n\n\nSegmentationGabor.build_filters(self, csize, lsize, thetaMin, thetaMax, pasTheta, sigma, gamma, lambdaMin, lambdaMax, pasLambda, psi)\n\n\n\n\nBuilds gabor filter\n:return: A list with the gabor filter\n\n\nprocess\n\n\n\nSegmentationGabor.process(self, img, filters)\n\n\n\n\nConvolution of each gabor filter\n:param img: a matrix which represents a picture\n:param filters: a list of matrix which represents gabor filters\n:return: The response of the convolution\n\n\nsegmentation\n\n\n\nSegmentationGabor.segmentation(self)\n\n\n\n\nSegmentation of a image\n:param matImg: a matrix which reresents an image\n:return: a mask which represent the segmentation. 1 means the algorithm detect a striation,\n\n\nconversionBinaire\n\n\n\nSegmentationGabor.conversionBinaire(self, img)\n\n\n\n\nConvert a matrix into a binary matrix\n :param img: a int matrix\n :return: a binary matrix\n\n\ninverseMatBin\n\n\n\nSegmentationGabor.inverseMatBin(self, mat)\n\n\n\n\nCreate the inverse of a binary matrix, 0 become 1, 1 become 0\n:param mat: a binary matrix\n:return: a binary matrix\n\n\nkMeans\n\n\n\nSegmentationGabor.kMeans(img, k)\n\n\n\n\nApplique la m\u00e9thode des k-means sur une image pour la segmenter\n@param img: image \u00e0 traiter (cr\u00e9er pr\u00e9c\u00e9demment gr\u00e2ce \u00e0 \"imread()\")\n@param k: nombre de clusters\n@return: l'image apr\u00e8s traitement",
            "title": "Model"
        },
        {
            "location": "/View/",
            "text": "Interface\n\n\n\nInterface(self, controler, **kwargs)\n\n\n\n\nClass holding the whole user interface of the application\n\n\nchangeCheckboxEntourage\n\n\n\nInterface.changeCheckboxEntourage(self)\n\n\n\n\nDisable dest reposiory if we uncheck the box \"Entourage\"\n:return:\n\n\nbrowseRepSrc\n\n\n\nInterface.browseRepSrc(self)\n\n\n\n\nAllows to change the source repository\n:return: none\n\n\nbrowseRepDest\n\n\n\nInterface.browseRepDest(self)\n\n\n\n\nAllow to change the destination repository\n:return: none\n\n\ncliquer\n\n\n\nInterface.cliquer(self)\n\n\n\n\nLaunch the program itself\n\n\npause\n\n\n\nInterface.pause(self)\n\n\n\n\nPause the program during its execution\n\n\nchangeState\n\n\n\nInterface.changeState(self)\n\n\n\n\nAllows to unlock Stats tab after the execution\n\n\ndisplayImage\n\n\n\nInterface.displayImage(self, imageName, strie)\n\n\n\n\nDisplay an image in its own size in a different window (on top level)\n:param imageName: String that contains the imageName\n\n\ncreateWindowStats\n\n\n\nInterface.createWindowStats(self, clear, start)\n\n\n\n\nFunction linked to the Statistiques Window. It creates a whole new window on top of the main one. With details on the results, etc...\n:param clear: Tells if we need to clean the window first\n:param start: where to start in the list of images\n\n\nsaveCSV\n\n\n\nInterface.saveCSV(self)\n\n\n\n\nA function that save the results in a CSV file at the root of the program\n\n\ndisplayError\n\n\n\nInterface.displayError(self, message)\n\n\n\n\nDisplay an error in a different window (on top level)\n:param message: String that contains the error message\n\n\nrunProgressBar\n\n\n\nInterface.runProgressBar(self)\n\n\n\n\nStart the progress bar\n\n\nstopProgressBar\n\n\n\nInterface.stopProgressBar(self)\n\n\n\n\nStop the progressbar at the end of processing",
            "title": "View"
        },
        {
            "location": "/Controler/",
            "text": "Controler\n\n\n\nControler(self)\n\n\n\n\nsegmentation\n\n\n\nControler.segmentation(self)\n\n\n\n\n\"\nMain function which execute the whole code\n:param entourage: 0 or 1 if the user wants a contouring or not\n:param otherRep: 0 or 1 if the user wants to separate image  with striations\n:return:\n\n\ngiveRepPath\n\n\n\nControler.giveRepPath(self, repSource, repDest)\n\n\n\n\nSets the repertories\n:param repSource: the source repertory\n:param repDest: the dest repository\n\n\ndeverouilleBoutonStat\n\n\n\nControler.deverouilleBoutonStat(self)\n\n\n\n\nChange the state of the Statistics button state\n\n\nstopProgressBar\n\n\n\nControler.stopProgressBar(self)\n\n\n\n\nTells to the View when to stop the progress bar",
            "title": "Controler"
        }
    ]
}